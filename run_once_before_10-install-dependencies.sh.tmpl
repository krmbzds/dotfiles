{{- if (and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.name "Pop!_OS")) -}}
#!/bin/bash

set -e

# ****************************************************************************
# *                           Manual Installations                           *
# ****************************************************************************

function compile_libsecret() {
  lib_path=/usr/share/doc/git/contrib/credential/libsecret
  if [ ! -f "$lib_path/git-credential-libsecret" ]; then
    sudo apt -y install libsecret-1-dev
    sudo make --directory=$lib_path
    sudo apt -y purge libsecret-1-dev
  fi
}

function install_delta() {
  ! command -v delta &>/dev/null || return 0
  local tempdir
  tempdir="$(mktemp -d)"
  curl -fsSL 'https://api.github.com/repos/dandavison/delta/releases/latest' | jq -r ".assets[].browser_download_url" | grep "amd64\.deb$" | grep -v "musl" | xargs curl -s -L --output "$tempdir/delta.deb"
  sudo apt -y install "$tempdir/delta.deb"
  rm -rf "$tempdir"
}

function install_rvm() {
  {{ if .dependencies.rvm }}
    ! command -v rvm &>/dev/null || return 0
    installer="$(mktemp)"
    curl -fsSL 'https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer' --output "$installer"
    bash "$installer" --branch stable --ignore-dotfiles
    rm "$installer"
  {{ end }}
}

function install_anki() {
  {{ if .dependencies.anki }}
    ! command -v anki &>/dev/null || return 0
    local archive
    local tempdir
    archive="$(mktemp)"
    tempdir="$(mktemp -d)"
    curl -fsSL 'https://api.github.com/repos/ankitects/anki/releases/latest' | jq -r ".assets[].browser_download_url" | grep "linux" | xargs curl -s -L --output "$archive"
    tar -xf "$archive" -C "$tempdir" --strip-components=1
    cd "$tempdir" || return
    PREFIX="{{- .chezmoi.homeDir -}}/.local" ./install.sh
    rm "$archive"
    rm -rf "$tempdir"
    cd - || return
  {{ end }}
}

function install_faas() {
  {{ if .dependencies.faas }}
    ! command -v faas-cli &>/dev/null || return 0
    curl -fsSL 'https://cli.openfaas.com' | sed 's|/usr/local/bin|{{- .chezmoi.homeDir -}}/bin|' | sed 's/export ALIAS_NAME="faas"//' | sh
  {{ end }}
}

function install_doctl() {
  {{ if .dependencies.devops }}
    ! command -v doctl &>/dev/null || return 0
    curl -fsSL 'https://api.github.com/repos/digitalocean/doctl/releases/latest' | jq -r ".assets[].browser_download_url" | grep "linux-amd64\.tar\.gz$" | xargs curl -s -L | tar -xzC "{{ .chezmoi.homeDir }}/bin" doctl
  {{ end }}
}

# ****************************************************************************
# *                                   PPAs                                   *
# ****************************************************************************

function add_ppa_sublime_text() {
  {{ if .dependencies.sublime_text }}
    ! command -v subl &>/dev/null || return 0
    curl -fsSL 'https://download.sublimetext.com/sublimehq-pub.gpg' | sudo gpg --dearmor -o /usr/share/keyrings/sublimehq-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/sublimehq-archive-keyring.gpg] https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list > /dev/null
  {{ end }}
}

function add_ppa_docker() {
  {{ if .dependencies.docker }}
    ! command -v docker &>/dev/null || return 0
    curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  {{ end }}
}

function add_ppa_neovim() {
  {{ if .prefs.nvim.telescope }}
    # remove this when neovim 0.5 is in stable channel
    sudo add-apt-repository -y ppa:neovim-ppa/unstable
  {{ end }}
}

function add_ppa_terraform() {
  {{ if .dependencies.devops }}
    ! command -v terraform &>/dev/null || return 0
    curl -fsSL 'https://apt.releases.hashicorp.com/gpg' | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
  {{ end }}
}

function add_ppa_kubectl() {
  {{ if .dependencies.devops }}
    ! command -v kubectl &>/dev/null || return 0
    sudo curl -fsSL 'https://packages.cloud.google.com/apt/doc/apt-key.gpg' -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
  {{ end }}
}

function add_ppa_helm() {
  {{ if .dependencies.devops }}
    ! command -v helm &>/dev/null || return 0
    curl -fsSL 'https://baltocdn.com/helm/signing.asc' | sudo gpg --dearmor -o /usr/share/keyrings/helm-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm-archive-keyring.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list > /dev/null
  {{ end }}
}

function add_ppa_signal_messenger() {
  {{ if .dependencies.signal_messenger }}
    ! command -v signal-desktop &>/dev/null || return 0
    curl -fsSL 'https://updates.signal.org/desktop/apt/keys.asc' | sudo gpg --dearmor -o /usr/share/keyrings/signal-desktop-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main" | sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
  {{ end }}
}

# ****************************************************************************
# *                               Configuration                              *
# ****************************************************************************

function import_gpg_key_from_url() {
  curl -sSL "$1" | gpg --import -
}

function update_alternatives() {
  sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
  sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
  sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
}

function configure_static_workspaces() {
  {{ if .gnome.static_workspaces }}
    gsettings set org.gnome.mutter dynamic-workspaces false
    gsettings set org.gnome.desktop.wm.preferences num-workspaces "$1"

    for i in $(seq "$1"); do
      gsettings set org.gnome.shell.keybindings switch-to-application-"$i"  "[]"
      gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-"$i"  "['<Super>$i']"
      gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-"$i"  "['<Super><Shift>$i']"
    done
  {{ end }}
}

function disable_pulseaudio_switch_on_connect() {
  {{ if not .pulseaudio.switch_on_connect }}
    sudo sed -i 's/^load-module module-switch-on-connect$/# load-module module-switch-on-connect/g' /etc/pulse/default.pa
  {{ end }}
}

function logitech_mx_anywhere_2s_set_dpi() {
  {{ if (and .logitech.mx_anywhere_2s.enabled .logitech.mx_anywhere_2s.dpi ) }}
    echo '{{- template "udev_rule_2s" . -}}' | sudo tee /etc/udev/rules.d/50-LogitechMXAnywhere2S.rules > /dev/null
  {{ end }}
}

function logitech_g213_set_custom_backlight() {
  {{ if (and .logitech.g213.enabled .logitech.g213.custom_backlight) }}
    echo '{{- template "udev_rule_g213" . -}}' | sudo tee /etc/udev/rules.d/50-LogitechGamingKeyboardG213.rules > /dev/null
  {{ end }}
}

function logitech_g213_remap_caps_lock() {
  {{ if (and .logitech.g213.enabled .logitech.g213.remap_caps_lock) }}
    mkdir -p '{{ .chezmoi.homeDir -}}/.config/interception-tools'
    echo '{{ template "udevmon_config" . }}' | sudo tee {{ .chezmoi.homeDir -}}/.config/interception-tools/udevmon.yaml > /dev/null
    echo '{{ template "udevmon_service" . }}' | sudo tee /etc/systemd/system/udevmon.service > /dev/null
    sudo systemctl enable --now udevmon
    sudo systemctl start udevmon
  {{ end }}
}

function configure_docker_postinstall() {
  {{ if .dependencies.docker }}
    if ! [ "$(getent group docker)" ]; then
      sudo groupadd docker
      sudo usermod -aG docker "$USER"
    fi
    systemctl is-active docker && sudo systemctl enable docker.service
    systemctl is-active containerd && sudo systemctl enable containerd.service
  {{ end }}
}

# ****************************************************************************
# *                     APT Package Manager Installations                    *
# ****************************************************************************

function install_packages() {
  local packages=(
    alacritty
    bat
    exa
    fd-find
    gnupg
    htop
    jq
    neovim
    pcscd
    scdaemon
    tmux
    tree
    {{ if .logitech.mx_anywhere_2s.enabled -}}
    ratbagd
    {{ end -}}
    {{ if .logitech.g213.custom_backlight -}}
    python3-usb
    {{ end -}}

    {{ if .dependencies.meld -}}
    meld
    {{ end -}}

    {{ if .prefs.dracula_pro }}
    gnome-tweaks
    {{ end }}

    {{ if .dependencies.docker -}}
    docker-ce
    docker-ce-cli
    containerd.io
    docker-compose
    {{ end -}}

    {{ if .dependencies.devops -}}
    terraform
    kubectl
    helm
    {{ end -}}

    {{ if .dependencies.newsboat -}}
    mpv
    newsboat
    playerctl
    task-spooler
    urlview
    {{ end -}}

    {{ if .logitech.g213.remap_caps_lock -}}
    libevdev-dev
    libudev-dev
    libyaml-cpp-dev
    {{ end -}}

    {{ if .dependencies.signal_messenger -}}
    signal-desktop
    {{- end }}
  )

  add_ppa_neovim
  add_ppa_sublime_text
  add_ppa_docker
  add_ppa_terraform
  add_ppa_kubectl
  add_ppa_helm
  add_ppa_signal_messenger

  sudo apt -y update
  sudo apt -y upgrade
  sudo apt -y install "${packages[@]}"
  sudo apt -y autoremove
  sudo apt -y autoclean

  compile_libsecret
  install_doctl
  install_delta
  install_anki
  install_faas
  install_rvm
}

# ****************************************************************************
# *                                Main Script                               *
# ****************************************************************************

install_packages
update_alternatives
configure_docker_postinstall
import_gpg_key_from_url "{{ .gpg.pubkey_url }}"
configure_static_workspaces "{{ .gnome.workspace_count }}"
disable_pulseaudio_switch_on_connect
logitech_g213_set_custom_backlight
logitech_g213_remap_caps_lock
logitech_mx_anywhere_2s_set_dpi

{{ end }}
