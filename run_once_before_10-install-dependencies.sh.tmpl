{{- if (and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.name "Pop!_OS")) -}}
#!/bin/bash

set -e

# ****************************************************************************
# *                           Manual Installations                           *
# ****************************************************************************

function compile_libsecret() {
  lib_path=/usr/share/doc/git/contrib/credential/libsecret
  if [ ! -f "$lib_path/git-credential-libsecret" ]; then
    sudo apt -y install libsecret-1-dev
    sudo make --directory=$lib_path
    sudo apt -y purge libsecret-1-dev
  fi
}

function install_asdf() {
  {{ if .dependencies.asdf }}
    ! command -v asdf &>/dev/null || return 0
    git clone https://github.com/asdf-vm/asdf.git {{ .chezmoi.homeDir -}}/.asdf --branch master
    . {{ .chezmoi.homeDir -}}/.asdf/asdf.sh
    asdf plugin add bat "https://gitlab.com/wt0f/asdf-bat.git"
    asdf plugin add cheat "https://github.com/jmoratilla/asdf-cheat-plugin.git"
    asdf plugin add delta "https://github.com/andweeb/asdf-delta.git"
    asdf plugin add doctl "https://github.com/maristgeek/asdf-doctl.git"
    asdf plugin add duf "https://github.com/NeoHsu/asdf-duf.git"
    asdf plugin add dust "https://github.com/looztra/asdf-dust.git"
    asdf plugin add exa "https://github.com/nyrst/asdf-exa.git"
    asdf plugin add fd "https://gitlab.com/wt0f/asdf-fd.git"
    asdf plugin add golang "https://github.com/kennyp/asdf-golang.git"
    asdf plugin add helm "https://github.com/Antiarchitect/asdf-helm.git"
    asdf plugin add jq "https://github.com/azmcode/asdf-jq.git"
    asdf plugin add kubectl "https://github.com/Banno/asdf-kubectl.git"
    asdf plugin add lazydocker "https://github.com/comdotlinux/asdf-lazydocker.git"
    asdf plugin add lazygit "https://github.com/nklmilojevic/asdf-lazygit.git"
    asdf plugin add lua "https://github.com/Stratus3D/asdf-lua.git"
    asdf plugin add neovim "https://github.com/richin13/asdf-neovim.git"
    asdf plugin add nodejs "https://github.com/asdf-vm/asdf-nodejs.git"
    asdf plugin add python "https://github.com/danhper/asdf-python.git"
    asdf plugin add ripgrep "https://gitlab.com/wt0f/asdf-ripgrep.git"
    asdf plugin add ruby "https://github.com/asdf-vm/asdf-ruby.git"
    asdf plugin add rust "https://github.com/asdf-community/asdf-rust.git"
    asdf plugin add shellcheck "https://github.com/luizm/asdf-shellcheck.git"
    asdf plugin add terraform "https://github.com/Banno/asdf-hashicorp.git"
    asdf plugin add tmux "https://github.com/aphecetche/asdf-tmux.git"
    asdf plugin add viddy "https://github.com/ryodocx/asdf-viddy.git"
    asdf plugin add xh "https://github.com/NeoHsu/asdf-xh"
    asdf plugin add yarn "https://github.com/twuni/asdf-yarn.git"
    asdf install
  {{ else }}
    true
  {{ end }}
}

function install_anki() {
  {{ if .dependencies.anki }}
    ! command -v anki &>/dev/null || return 0
    local archive
    local tempdir
    archive="$(mktemp)"
    tempdir="$(mktemp -d)"
    curl -fsSL 'https://api.github.com/repos/ankitects/anki/releases/latest' | jq -r ".assets[].browser_download_url" | grep "linux" | xargs curl -s -L --output "$archive"
    tar -xf "$archive" -C "$tempdir" --strip-components=1
    cd "$tempdir" || return
    PREFIX="{{- .chezmoi.homeDir -}}/.local" ./install.sh
    rm "$archive"
    rm -rf "$tempdir"
    cd - || return
  {{ else }}
    true
  {{ end }}
}

function install_faas() {
  {{ if .dependencies.faas }}
    ! command -v faas-cli &>/dev/null || return 0
    curl -fsSL 'https://cli.openfaas.com' | sed 's|/usr/local/bin|{{- .chezmoi.homeDir -}}/bin|' | sed 's/export ALIAS_NAME="faas"//' | sh
  {{ else }}
    true
  {{ end }}
}

function install_lunarvim() {
  {{ if .prefs.lunarvim }}
    ! command -v lvim &>/dev/null || return 0
    bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh) --install-dependencies
    lvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  {{ else }}
    true
  {{ end }}
}

# ****************************************************************************
# *                                   PPAs                                   *
# ****************************************************************************

function add_ppa_sublime_text() {
  {{ if .dependencies.sublime_text }}
    ! command -v subl &>/dev/null || return 0
    curl -fsSL 'https://download.sublimetext.com/sublimehq-pub.gpg' | sudo gpg --dearmor -o /usr/share/keyrings/sublimehq-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/sublimehq-archive-keyring.gpg] https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list > /dev/null
  {{ else }}
    true
  {{ end }}
}

function add_ppa_docker() {
  {{ if .dependencies.docker }}
    ! command -v docker &>/dev/null || return 0
    curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  {{ else }}
    true
  {{ end }}
}

function add_ppa_signal_messenger() {
  {{ if .dependencies.signal_messenger }}
    ! command -v signal-desktop &>/dev/null || return 0
    curl -fsSL 'https://updates.signal.org/desktop/apt/keys.asc' | sudo gpg --dearmor -o /usr/share/keyrings/signal-desktop-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main" | sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
  {{ else }}
    true
  {{ end }}
}

function add_ppa_libratbag() {
  {{ if .logitech.mx_anywhere_2s.enabled }}
    sudo add-apt-repository -y ppa:libratbag-piper/piper-libratbag-git
  {{ else }}
    true
  {{ end }}
}

# ****************************************************************************
# *                               Configuration                              *
# ****************************************************************************

function import_gpg_key_from_url() {
  curl -sSL "$1" | gpg --import -
}

function update_alternatives() {
  sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
  sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
  sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
}

function configure_static_workspaces() {
  {{ if .gnome.static_workspaces }}
    gsettings set org.gnome.mutter dynamic-workspaces false
    gsettings set org.gnome.desktop.wm.preferences num-workspaces "$1"

    for i in $(seq "$1"); do
      gsettings set org.gnome.shell.keybindings switch-to-application-"$i"  "[]"
      gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-"$i"  "['<Super>$i']"
      gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-"$i"  "['<Super><Shift>$i']"
    done
  {{ else }}
    true
  {{ end }}
}

function disable_pulseaudio_switch_on_connect() {
  {{ if not .pulseaudio.switch_on_connect }}
    sudo sed -i 's/^load-module module-switch-on-connect$/# load-module module-switch-on-connect/g' /etc/pulse/default.pa
  {{ else }}
    true
  {{ end }}
}

function logitech_mx_anywhere_2s_set_dpi() {
  {{ if (and .logitech.mx_anywhere_2s.enabled .logitech.mx_anywhere_2s.dpi ) }}
    echo '{{- template "udev_rule_2s" . -}}' | sudo tee /etc/udev/rules.d/50-LogitechMXAnywhere2S.rules > /dev/null
    create_udevmon_service
    enable_services udevmon ratbagd
  {{ else }}
    true
  {{ end }}
}

function logitech_g213_set_custom_backlight() {
  {{ if (and .logitech.g213.enabled .logitech.g213.custom_backlight) }}
    create_udevmon_service
    echo '{{- template "udev_rule_g213" . -}}' | sudo tee /etc/udev/rules.d/50-LogitechGamingKeyboardG213.rules > /dev/null
    enable_service udevmon
  {{ else }}
    true
  {{ end }}
}

function logitech_g213_remap_keys() {
  {{ if (and .logitech.g213.enabled .logitech.g213.remap_caps_lock) }}
    create_udevmon_service
    enable_service udevmon
  {{ else }}
    true
  {{ end }}
}

function skyloong_gk61x_remap_keys() {
  {{ if (and .skyloong.gk61x.enabled .skyloong.gk61x.remap_caps_lock) }}
    create_udevmon_service
    enable_service udevmon
  {{ else }}
    true
  {{ end }}
}

function configure_docker_postinstall() {
  {{ if .dependencies.docker }}
    if ! [ "$(getent group docker)" ]; then
      sudo groupadd docker
      sudo usermod -aG docker "$USER"
    fi
    enable_services docker containerd
  {{ else }}
    true
  {{ end }}
}

# ****************************************************************************
# *                     APT Package Manager Installations                    *
# ****************************************************************************

function install_packages() {
  local packages=(
    {{ if .dependencies.asdf -}}
    autoconf
    bison
    build-essential
    coreutils
    libbz2-dev
    libdb-dev
    libffi-dev
    libgdbm-dev
    libgdbm6
    liblzma-dev
    libncurses-dev
    libreadline-dev
    libreadline-dev
    libsqlite3-dev
    libssl-dev
    libxml2-dev
    libxmlsec1-dev
    libyaml-dev
    llvm
    make
    tk-dev
    xz-utils
    zlib1g-dev
    {{ end -}}

    alacritty
    gnupg
    htop
    pcscd
    scdaemon
    tree
    {{ if .logitech.mx_anywhere_2s.enabled -}}
    ratbagd
    {{ end -}}
    {{ if .logitech.g213.custom_backlight -}}
    python3-usb
    {{ end -}}

    {{ if .dependencies.meld -}}
    meld
    {{ end -}}

    {{ if .prefs.dracula_pro }}
    gnome-tweaks
    {{ end }}

    {{ if .dependencies.docker -}}
    docker-ce
    docker-ce-cli
    containerd.io
    docker-compose
    {{ end -}}

    {{ if .dependencies.newsboat -}}
    mpv
    newsboat
    playerctl
    task-spooler
    urlview
    {{ end -}}

    {{ if (or (and .logitech.g213.enabled .logitech.g213.remap_caps_lock) (and .skyloong.gk61x.enabled .skyloong.gk61x.remap_caps_lock)) -}}
    libevdev-dev
    libudev-dev
    libyaml-cpp-dev
    {{ end -}}

    {{ if .dependencies.signal_messenger -}}
    signal-desktop
    {{- end }}
  )

  add_ppa_sublime_text
  add_ppa_docker
  add_ppa_signal_messenger
  add_ppa_libratbag

  sudo apt -y update
  sudo apt -y upgrade
  sudo apt -y install "${packages[@]}"
  sudo apt -y autoremove
  sudo apt -y autoclean

  compile_libsecret
  install_anki
  install_faas
  install_asdf
  install_lunarvim
}

# ****************************************************************************
# *                            Service Management                            *
# ****************************************************************************

function create_udevmon_service() {
  mkdir -p '{{ .chezmoi.homeDir -}}/.config/interception-tools'
  echo '{{ template "udevmon_config" . }}' | sudo tee {{ .chezmoi.homeDir -}}/.config/interception-tools/udevmon.yaml > /dev/null
  echo '{{ template "udevmon_service" . }}' | sudo tee /etc/systemd/system/udevmon.service > /dev/null
}

function enable_services() {
  for service; do
    sudo systemctl enable --now "$service"
    sudo systemctl try-restart "$service" || sudo systemctl start "$service"
  done
}

function enable_service() {
  enable_services "$1"
}

# ****************************************************************************
# *                                Main Script                               *
# ****************************************************************************

install_packages
update_alternatives
configure_docker_postinstall
import_gpg_key_from_url "{{ .gpg.pubkey_url }}"
configure_static_workspaces "{{ .gnome.workspace_count }}"
disable_pulseaudio_switch_on_connect
logitech_mx_anywhere_2s_set_dpi
logitech_g213_set_custom_backlight
logitech_g213_remap_keys
skyloong_gk61x_remap_keys

{{ end }}
