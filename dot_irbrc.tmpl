# frozen_string_literal: false

# https://gist.github.com/gucki/6523172
# https://gist.github.com/DGCK81LNN/cb701f85b861b6bc3b2c8953370b62db
# https://gist.github.com/karmatr0n/7266751236e4af267ed4feb78ae549e3
# https://gist.github.com/swanson/3ca98caff43d52f62b4b99f6f2c7444c
# https://gist.github.com/rishiip/2fb7302c1cb0dd490ae3760acfbdfa99
# https://gist.github.com/mattantonelli/0d9ead06d1fc4a50f09551e7a6523653
# https://gist.github.com/g13ydson/983aad59acb2e6db18127134a01d7e59

module IRB
  module InputCompletor
    IGNORE_METHODS_LNN = %w[
      pretty_print pretty_print_cycle pretty_print_inspect
      pretty_print_instance_variables singleton_class itself taint tainted?
      untaint untrust untrusted? trust methods singleton_methods
      protected_methods private_methods public_methods instance_variables
      instance_variable_get instance_variable_set instance_variable_defined?
      remove_instance_variable display public_send public_method
      singleton_method define_singleton_method tap pretty_inspect
    ]

    def self.retrieve_completion_data(input, bind: IRB.conf[:MAIN_CONTEXT].workspace.binding, doc_namespace: false)
      case input
      when /^((["'`]).*\2)\.([^.]*)$/
        # String
        receiver = $1
        message = $3

        candidates = String.instance_methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
        if doc_namespace
          "String.#{message}"
        else
          select_message(receiver, message, candidates)
        end

      when /^(\/[^\/]*\/)\.([^.]*)$/
        # Regexp
        receiver = $1
        message = $2

        candidates = Regexp.instance_methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
        if doc_namespace
          "Regexp.#{message}"
        else
          select_message(receiver, message, candidates)
        end

      when /^([^\]]*\])\.([^.]*)$/
        # Array
        receiver = $1
        message = $2

        candidates = Array.instance_methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
        if doc_namespace
          "Array.#{message}"
        else
          select_message(receiver, message, candidates)
        end

      when /^([^}]*\})\.([^.]*)$/
        # Proc or Hash
        receiver = $1
        message = $2

        proc_candidates = Proc.instance_methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
        hash_candidates = Hash.instance_methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
        if doc_namespace
          ["Proc.#{message}", "Hash.#{message}"]
        else
          select_message(receiver, message, proc_candidates | hash_candidates)
        end

      when /^(:[^:.]+)$/
        # Symbol
        return nil if doc_namespace
        sym = $1
        candidates = Symbol.all_symbols.collect do |s|
          ":" + s.id2name.encode(Encoding.default_external)
        rescue EncodingError
          # ignore
        end
        candidates.grep(/^#{Regexp.quote(sym)}/)

      when /^::([A-Z][^:.()]*)$/
        # Absolute Constant or class methods
        receiver = $1
        candidates = Object.constants.collect { |m| m.to_s }
        if doc_namespace
          candidates.find { |i| i == receiver }
        else
          candidates.grep(/^#{receiver}/).collect { |e| "::" + e }
        end

      when /^([A-Z].*)::([^:.]*)$/
        # Constant or class methods
        receiver = $1
        message = $2
        begin
          candidates = eval("#{receiver}.constants.collect{|m| m.to_s}", bind, __FILE__, __LINE__)
          # candidates |= eval("#{receiver}.methods.collect{|m| m.to_s}", bind)
        rescue Exception
          candidates = []
        end
        if doc_namespace
          "#{receiver}::#{message}"
        else
          select_message(receiver, message, candidates, "::")
        end

      when /^(:[^:.)]+)(\.|::)([^.]*)$/
        # Symbol
        receiver = $1
        sep = $2
        message = $3

        candidates = Symbol.instance_methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
        if doc_namespace
          "Symbol.#{message}"
        else
          select_message(receiver, message, candidates, sep)
        end

      when /^(?<num>-?(?:0[dbo])?[0-9_]+(?:\.[0-9_]+)?(?:(?:[eE][+-]?[0-9]+)?i?|r)?)(?<sep>\.|::)(?<mes>[^.]*)$/
        # Numeric
        receiver = $~[:num]
        sep = $~[:sep]
        message = $~[:mes]

        begin
          instance = eval(receiver, bind)
          if doc_namespace
            "#{instance.class.name}.#{message}"
          else
            candidates = instance.methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
            select_message(receiver, message, candidates, sep)
          end
        rescue Exception
          if doc_namespace
            nil
          else
            candidates = []
          end
        end

      when /^(-?0x[0-9a-fA-F_]+)(\.|::)([^.]*)$/
        # Numeric(0xFFFF)
        receiver = $1
        sep = $2
        message = $3

        begin
          instance = eval(receiver, bind)
          if doc_namespace
            "#{instance.class.name}.#{message}"
          else
            candidates = instance.methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
            select_message(receiver, message, candidates, sep)
          end
        rescue Exception
          if doc_namespace
            nil
          else
            candidates = []
          end
        end

      when /^(\$[^.]*)$/
        # global var
        gvar = $1
        all_gvars = global_variables.collect { |m| m.to_s }
        if doc_namespace
          all_gvars.find { |i| i == gvar }
        else
          all_gvars.grep(Regexp.new(Regexp.quote(gvar)))
        end

      when /^([^.:"].*)(\.|::)([^.]*)$/
        # variable.func or func.func
        receiver = $1
        sep = $2
        message = $3

        gv = eval("global_variables", bind, __FILE__, __LINE__).collect { |m| m.to_s }.push("true", "false", "nil")
        lv = eval("local_variables", bind, __FILE__, __LINE__).collect { |m| m.to_s }
        iv = eval("instance_variables", bind, __FILE__, __LINE__).collect { |m| m.to_s }
        cv = eval("self.class.constants", bind, __FILE__, __LINE__).collect { |m| m.to_s }

        if (gv | lv | iv | cv).include?(receiver) || /^[A-Z]/ =~ receiver && /\./ !~ receiver
          # foo.func and foo is var. OR
          # foo::func and foo is var. OR
          # foo::Const and foo is var. OR
          # Foo::Bar.func
          begin
            candidates = []
            rec = eval(receiver, bind)
            candidates = if (sep == "::") && rec.is_a?(Module)
              rec.constants.collect { |m| m.to_s }
            else
              rec.methods.collect { |m| m.to_s } - IGNORE_METHODS_LNN
            end
          rescue Exception
            candidates = []
          end
        else
          # func1.func2
          candidates = []
          # to_ignore = ignored_modules
          # ObjectSpace.each_object(Module){|m|
          #   next if (to_ignore.include?(m) rescue true)
          #   candidates.concat m.instance_methods(false).collect{|x| x.to_s}
          # }
          # candidates.sort!
          # candidates.uniq!
        end
        if doc_namespace
          rec_class = rec.is_a?(Module) ? rec : rec.class
          "#{rec_class.name}#{sep}#{candidates.find { |i| i == message }}"
        else
          select_message(receiver, message, candidates, sep)
        end

      when /^[^:.]*$/
        if doc_namespace
          vars = eval("local_variables | instance_variables", bind, __FILE__, __LINE__).collect { |m| m.to_s }
          perfect_match_var = vars.find { |m| m.to_s == input }
          if perfect_match_var
            eval("#{perfect_match_var}.class.name", bind, __FILE__, __LINE__)
          else
            candidates = eval("methods | private_methods | local_variables | instance_variables | self.class.constants", bind, __FILE__, __LINE__).collect { |m| m.to_s } - IGNORE_METHODS_LNN
            candidates |= ReservedWords
            candidates.find { |i| i == input }
          end
        else
          candidates = eval("methods | private_methods | local_variables | instance_variables | self.class.constants", bind, __FILE__, __LINE__).collect { |m| m.to_s } - IGNORE_METHODS_LNN
          candidates |= ReservedWords
          candidates.grep(/^#{Regexp.quote(input)}/)
        end
      else
        []
      end
    end
  end
end

{{ if (or .prefs.dracula_pro .gnome.dracula) -}}
# https://github.com/ruby/irb/pull/337
# https://github.com/ruby/reline/pull/413

# To fix terrible white on cyan completions
# gem install specific_install
# gem specific_install https://github.com/krmbzds/reline
# gem "reline", "0.3.2", :github => 'krmbzds/reline'
if Reline.respond_to?(:dialog_default_bg_color)
  Reline.dialog_default_bg_color = :black
  Reline.dialog_default_fg_color = :yellow
  Reline.dialog_highlight_bg_color = :blue
  Reline.dialog_highlight_fg_color = :white
end
{{ end -}}

# https://github.com/stefansundin/dotfiles/blob/master/.irbrc
def clear
  system("clear")
end

def time
  start = Time.now
  yield
  eta = Time.now - start
  mm, ss = eta.divmod(60)
  hh, mm = mm.divmod(60)
  dd, hh = hh.divmod(24)
  puts "[%s] Took %d days %2d hours %2d minutes %2d seconds." % [Time.now.strftime("%T"), dd, hh, mm, ss]
  eta
end

# https://github.com/k0kubun/dotfiles/commits/master/config/.irbrc
autoload :Base64, "base64"
autoload :CGI, "cgi"
autoload :CSV, "csv"
autoload :Digest, "digest"
autoload :ERB, "erb"
autoload :FileUtils, "fileutils"
autoload :JSON, "json"
autoload :Pathname, "pathname"
autoload :Psych, "psych"
autoload :Ripper, "ripper"
autoload :SecureRandom, "securerandom"
autoload :Shellwords, "shellwords"
autoload :StringIO, "stringio"
autoload :URI, "uri/generic" # `autoload :URI, 'uri'` breaks Rails
autoload :YAML, "yaml"
autoload :Zlib, "zlib"

unless defined?(IRB::METHOD_AUTOLOAD)
  IRB::METHOD_AUTOLOAD = Hash.new({
    to_json: "json",
    to_yaml: "yaml"
  }).merge({
    Time => {parse: "time"}
  })
end
Kernel.module_eval do
  def method_missing(name, *args, &block)
    if lib = IRB::METHOD_AUTOLOAD[self][name]
      require lib
      return public_send(name, *args, &block)
    end
    super
  end
end

IRB.conf[:USE_MULTILINE] = true
IRB.conf[:USE_AUTOCOMPLETE] = true
IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:INSPECT_MODE] = :inspect
if defined?(IRB::Color) # just for consistency
  clear = "\e[0m"
  bold = "\e[1m"
  green = "\e[32m"
  blue = "\e[34m"
  cyan = "\e[36m"
  # My addition for Rails
  icon = case ENV["RAILS_ENV"]
  when "test" then "🧪 "
  when "development" then "🔨 "
  when "staging" then "🍿 "
  when "production" then "🚨 "
  end
  IRB.conf[:PROMPT][:DEFAULT] = {
    PROMPT_I: "#{icon}#{cyan}#{bold}%N#{clear}(#{green}#{bold}%m#{clear})[#{blue}%02n#{clear}:%i]> ",
    PROMPT_N: "#{icon}#{cyan}#{bold}%N#{clear}(#{green}#{bold}%m#{clear})[#{blue}%02n#{clear}:%i]> ",
    PROMPT_S: "#{icon}#{cyan}#{bold}%N#{clear}(#{green}#{bold}%m#{clear})[#{blue}%02n#{clear}:%i]%l ",
    PROMPT_C: "#{icon}#{cyan}#{bold}%N#{clear}(#{green}#{bold}%m#{clear})[#{blue}%02n#{clear}:%i]* ",
    RETURN: "=> %s\n"
  }
end

begin
  require "irb/cmd/whereami"
rescue LoadError
  require "irb/cmd/nop"
  module IRB
    module ExtendCommand
      class Whereami < Nop
        def execute(*)
          code = irb_context.workspace.code_around_binding
          puts code || "The current context doesn't have code."
        end
      end
    end
  end
  IRB::ExtendCommandBundle.def_extend_command(:irb_whereami, :Whereami, "irb/cmd/nop", [:whereami, IRB::ExtendCommandBundle::NO_OVERRIDE])
end

if defined?(IRB::Color) # used by IRB::ExtendCommand::Ls
  begin
    require "irb/cmd/ls"
  rescue LoadError
    require "irb/cmd/nop"
    module IRB
      module ExtendCommand
        class Ls < Nop
          def execute(*arg, grep: nil)
            o = Output.new(grep: grep)

            obj = arg.empty? ? irb_context.workspace.main : arg.first
            locals = arg.empty? ? irb_context.workspace.binding.local_variables : []
            klass = ((obj.instance_of?(Class) || obj.instance_of?(Module)) ? obj : obj.class)

            o.dump("constants", obj.constants) if obj.respond_to?(:constants)
            dump_methods(o, klass, obj)
            o.dump("instance variables", obj.instance_variables)
            o.dump("class variables", klass.class_variables)
            o.dump("locals", locals)
          end

          def dump_methods(o, klass, obj)
            singleton_class = begin obj.singleton_class; rescue TypeError; nil end
            maps = class_method_map((singleton_class || klass).ancestors)
            maps.each do |mod, methods|
              name = (mod == singleton_class) ? "#{klass}.methods" : "#{mod}#methods"
              o.dump(name, methods)
            end
          end

          def class_method_map(classes)
            dumped = Set.new
            classes.reject { |mod| mod >= Object }.map do |mod|
              methods = mod.public_instance_methods(false).select { |m| dumped.add?(m) }
              [mod, methods]
            end.reverse
          end

          class Output
            MARGIN = "  "

            def initialize(grep: nil)
              @grep = grep
              @line_width = screen_width - MARGIN.length # right padding
            end

            def dump(name, strs)
              strs = strs.grep(@grep) if @grep
              strs = strs.sort
              return if strs.empty?

              # Attempt a single line
              print "#{Color.colorize(name, [:BOLD, :BLUE])}: "
              if fits_on_line?(strs, cols: strs.size, offset: "#{name}: ".length)
                puts strs.join(MARGIN)
                return
              end
              puts

              # Dump with the largest # of columns that fits on a line
              cols = strs.size
              until fits_on_line?(strs, cols: cols, offset: MARGIN.length) || cols == 1
                cols -= 1
              end
              widths = col_widths(strs, cols: cols)
              strs.each_slice(cols) do |ss|
                puts ss.map.with_index { |s, i| "#{MARGIN}%-#{widths[i]}s" % s }.join
              end
            end

            private

            def fits_on_line?(strs, cols:, offset: 0)
              width = col_widths(strs, cols: cols).sum + MARGIN.length * (cols - 1)
              width <= @line_width - offset
            end

            def col_widths(strs, cols:)
              cols.times.map do |col|
                (col...strs.size).step(cols).map do |i|
                  strs[i].length
                end.max
              end
            end

            def screen_width
              Reline.get_screen_size.last
            rescue Errno::EINVAL # in `winsize': Invalid argument - <STDIN>
              80
            end
          end
          private_constant :Output
        end
      end
    end
    IRB::ExtendCommandBundle.def_extend_command(:irb_ls, :Ls, "irb/cmd/nop", [:ls, IRB::ExtendCommandBundle::NO_OVERRIDE])
  end

  begin
    require "irb/cmd/show_source"
  rescue LoadError
    require "irb/cmd/nop"
    module IRB
      module ExtendCommand
        class ShowSource < Nop
          def execute(str = nil)
            unless str.is_a?(String)
              puts "Error: Expected a string but got #{str.inspect}"
              return
            end
            source = find_source(str)
            if source && File.exist?(source.file)
              show_source(source)
            else
              puts "Error: Couldn't locate a definition for #{str}"
            end
            nil
          end

          private

          # @param [IRB::ExtendCommand::ShowSource::Source] source
          def show_source(source)
            puts
            puts "#{bold("From")}: #{source.file}:#{source.first_line}"
            puts
            code = IRB::Color.colorize_code(File.read(source.file))
            puts code.lines[(source.first_line - 1)...source.last_line].join
            puts
          end

          def find_source(str)
            case str
            when /\A[A-Z]\w*(::[A-Z]\w*)*\z/ # Const::Name
              eval(str, irb_context.workspace.binding) # trigger autoload
              base = irb_context.workspace.binding.receiver.yield_self { |r| r.is_a?(Module) ? r : Object }
              file, line = base.const_source_location(str) if base.respond_to?(:const_source_location) # Ruby 2.7+
            when /\A(?<owner>[A-Z]\w*(::[A-Z]\w*)*)#(?<method>[^ :.]+)\z/ # Class#method
              owner = eval(Regexp.last_match[:owner], irb_context.workspace.binding)
              method = Regexp.last_match[:method]
              if owner.respond_to?(:instance_method) && owner.instance_methods.include?(method.to_sym)
                file, line = owner.instance_method(method).source_location
              end
            when /\A((?<receiver>.+)(\.|::))?(?<method>[^ :.]+)\z/ # method, receiver.method, receiver::method
              receiver = eval(Regexp.last_match[:receiver] || "self", irb_context.workspace.binding)
              method = Regexp.last_match[:method]
              file, line = receiver.method(method).source_location if receiver.respond_to?(method)
            end
            if file && line
              Source.new(file: file, first_line: line, last_line: find_end(file, line))
            end
          end

          def find_end(file, first_line)
            return first_line unless File.exist?(file)
            lex = RubyLex.new
            lines = File.read(file).lines[(first_line - 1)..]
            tokens = RubyLex.ripper_lex_without_warning(lines.join)

            code = +""
            prev_tokens = []

            # chunk with line number
            tokens.chunk { |tok| tok[0][0] }.each do |lnum, chunk|
              code << lines[lnum]
              prev_tokens.concat chunk

              continue = lex.process_continue(prev_tokens)
              code_block_open = lex.check_code_block(code, prev_tokens)
              if !continue && !code_block_open
                return first_line + lnum
              end
            end
            first_line
          end

          def bold(str)
            Color.colorize(str, [:BOLD])
          end

          Source = Struct.new(
            :file, # @param [String] - file name
            :first_line, # @param [String] - first line
            :last_line, # @param [String] - last line
            keyword_init: true
          )
          private_constant :Source
        end
      end
    end
    IRB::ExtendCommandBundle.def_extend_command(:irb_show_source, :ShowSource, "irb/cmd/nop", [:show_source, IRB::ExtendCommandBundle::NO_OVERRIDE])
  end

  # Convert @, $, and -G/--grep
  IRB::Context.prepend(Module.new {
    kwargs = (RUBY_VERSION >= "2.7.0") ? ", **" : ""
    line = __LINE__
    eval %q{
      def evaluate(line, *__ARGS__)
        #case line
        #when "@\n"
        #  line.replace("whereami\n")
        #when /\A\$ /
        #  line.replace("show_source #{line.sub(/\A\$ /, '').strip.dump}\n")
        #when /(-G|--grep)/
        #  if line.sub!(/\A\s*ls\s/, '')
        #    grep = nil
        #    line.gsub!(/(-G|--grep)\s+([^\s]+)/) { grep = $2; '' }
        #    line = line.tap(&:chomp!).empty? ? '' : "#{line},"
        #    line.replace("IRB::ExtendCommand::Ls.new(irb_context).execute(#{line} grep: /#{grep}/)")
        #  end
        #end
        super
      end
    }.sub(/__ARGS__/, kwargs), nil, __FILE__, line
  })

  IRB::ReidlineInputMethod.prepend(Module.new {
    def check_termination(&block)
      super do |code|
        next true if code == "@\n" || code.start_with?("ls ")
        block.call(code)
      end
    end
  })

  Reline.singleton_class.prepend(Module.new {
    def output_modifier_proc=(block)
      super(
        proc do |output, complete:|
          if output.start_with?("$")
            "$#{block.call(output[1..], complete: complete)}"
          elsif output.include?("-G")
            left, right = output.split("-G", 2)
            "#{block.call(left, complete: complete)}-G#{right}"
          elsif output == "@\n"
            output
          else
            block.call(output, complete: complete)
          end
        end
      )
    end
  })
end
