{{- if (and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.name "Pop!_OS")) -}}
#!/bin/bash

set -e

# ****************************************************************************
# *                                 Cleanup                                  *
# ****************************************************************************

function wait_for_apt() {
  while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do
    sleep 1
  done
}

function remove_flatpak() {
  {{ if .dependencies.flatpak }}
  true
  {{ else }}
  command -v flatpak &>/dev/null || return 0
  flatpak uninstall --all
  wait_for_apt && sudo apt -y purge --autoremove flatpak
  rm -rf "{{- .chezmoi.homeDir -}}/.local/share/flatpak"
  {{ end }}
}

function remove_default_packages() {
  {{ if not .dependencies.evince -}} wait_for_apt && sudo apt -y purge "evince*" {{- end }}
  {{ if not .dependencies.geary -}} wait_for_apt && sudo apt -y purge geary {{- end }}
  {{ if not .dependencies.libreoffice -}} wait_for_apt && sudo apt -y purge "libreoffice*" {{- end }}
  {{ if not .dependencies.simple_scanner -}} wait_for_apt && sudo apt -y purge simple-scan {{- end }}
  {{ if not .dependencies.totem -}} wait_for_apt && sudo apt -y purge "totem*" {{- end }}
}

function remove_packages() {
  remove_flatpak
  remove_default_packages
}

# ****************************************************************************
# *                           Manual Installations                           *
# ****************************************************************************

function install_keyd() {
  {{ if lookPath "keyd" }}
    true
  {{ else }}
    {{ if .keyd.enabled }}
      local tempdir
      tempdir="$(mktemp -d)"
      git clone "https://github.com/rvaiya/keyd" "$tempdir"
      cd "$tempdir" || return
      make && sudo make install
      cd - || return
      rm -rf "$tempdir"
    {{ else }}
      true
    {{ end }}
  {{ end }}
}

function install_anki() {
  {{ if lookPath "anki" }}
    true
  {{ else }}
    {{ if .dependencies.anki }}
      ! command -v anki &>/dev/null || return 0
      local cmd
      local url
      local archive
      local tempdir
      cmd='curl -fsSL'
      url='https://api.github.com/repos/ankitects/anki/releases/latest'
      archive="$(mktemp)"
      tempdir="$(mktemp -d)"
      if [ -n "$GITHUB_TOKEN" ]; then
        cmd="$cmd --header 'Authorization: token $GITHUB_TOKEN'"
      fi
      eval "$cmd $url" | grep 'browser_' | cut -d\" -f4 | grep "linux" | grep "qt6" | xargs curl -s -L --output "$archive"
      tar -xf "$archive" -C "$tempdir" --strip-components=1
      cd "$tempdir" || return
      PREFIX="{{- .chezmoi.homeDir -}}/.local" ./install.sh
      rm "$archive"
      rm -rf "$tempdir"
      cd - || return
    {{ else }}
      true
    {{ end }}
  {{ end }}
}

function install_faas() {
  {{ if .dependencies.faas }}
    ! command -v faas-cli &>/dev/null || return 0
    curl -fsSL 'https://cli.openfaas.com' | sed 's|/usr/local/bin|{{- .chezmoi.homeDir -}}/bin|' | sed 's/export ALIAS_NAME="faas"//' | sh
  {{ else }}
    true
  {{ end }}
}

function install_asdf() {
  {{ if .asdf.enabled }}
    ! command -v asdf &>/dev/null || return 0
    git clone https://github.com/asdf-vm/asdf.git {{ .chezmoi.homeDir -}}/.asdf --branch master || true
  {{ else }}
    true
  {{ end }}
}

function install_ledger_live() {
  {{ if lookPath "ledger-live.AppImage" }}
    true
  {{ else }}
    {{ if .hardware.ledger.nano_s.enabled }}
      local tempdir
      local pubkey
      local hashes
      local sigmsg
      local url_base
      local url_sig
      local file
      tempdir=$(mktemp -d)
      pubkey=$(mktemp)
      hashes=$(mktemp)
      sigmsg=$(mktemp)
      url_base="https://download.live.ledger.com"
      url_sig="https://resources.live.ledger.app/public_resources/signatures"
      file=$(curl -fsSL $url_base/latest-linux.yml | grep "^  - url: " | cut -c10-)
      echo '{{- template "ledger_pubkey" . -}}' | base64 --decode > "$pubkey"
      echo "$url_sig/$file.sha512sum" | sed 's/-linux-x86_64.AppImage//' | xargs curl -s -L --output "$hashes"
      echo "$url_sig/$file.sha512sum.sig" | sed 's/-linux-x86_64.AppImage//' | xargs curl -s -L --output "$sigmsg"
      if (openssl dgst -sha256 -verify "$pubkey" -signature "$sigmsg" "$hashes"); then
        curl -s -L "$url_base/$file" --output "$tempdir/$file"
        cd "$tempdir"
        if (sha512sum --ignore-missing --check "$hashes"); then
          chmod +x "$tempdir/$file"
          mv "$tempdir/$file" {{ .chezmoi.homeDir -}}/.local/bin/ledger-live.AppImage
          mkdir -p {{ .chezmoi.homeDir -}}/.local/share/icons/
          curl -s -L --output {{ .chezmoi.homeDir -}}/.local/share/icons/ledger-live-icon.png "https://github.com/LedgerHQ/ledger-live/raw/develop/apps/ledger-live-desktop/build-nightly/icon.png"
          cd - && rm -rf "$tempdir" "$pubkey" "$hashes" "$sigmsg"
          echo "Ledger Live installed successfully"
          return 0
        else
          echo "Hash mismatch"
          cd - && rm -rf "$tempdir" "$pubkey" "$hashes" "$sigmsg"
          return 1
        fi
      else
        echo "Failed to verify sha512sum hashes"
        rm -rf "$tempdir" "$pubkey" "$hashes" "$sigmsg"
        return 1
      fi
    {{ else }}
      true
    {{ end }}
  {{ end }}
}

function install_taswarrior_tui() {
  {{ if lookPath "taskwarrior-tui" }}
    true
  {{ else }}
    {{ if .dependencies.taskwarrior }}
      local cmd
      local url
      local debfile
      local tempdir
      cmd='curl -fsSL'
      url='https://api.github.com/repos/kdheepak/taskwarrior-tui/releases/latest'
      debfile="$(mktemp)"
      tempdir="$(mktemp -d)"
      if [ -n "$GITHUB_TOKEN" ]; then
        cmd="$cmd --header 'Authorization: token $GITHUB_TOKEN'"
      fi
      eval "$cmd $url" | grep 'browser_' | cut -d\" -f4 | grep "taskwarrior-tui.deb" | xargs curl -s -L --output "$debfile"
      cd "$tempdir" || return
      sudo dpkg -i "$debfile"
      rm "$debfile"
      rm -rf "$tempdir"
      cd - || return
    {{ else }}
      true
    {{ end }}
  {{ end }}
}

function install_mpv_nightly() {
  {{ if .dependencies.newsboat }}
    ! command -v mpv &>/dev/null || return 0
    wait_for_apt && sudo apt -y install -t "o=UvT" mpv
  {{ else }}
    true
  {{ end }}
}

function install_mpv_plugin_quality_menu() {
  {{ if .dependencies.newsboat }}
    local cmd
    local url
    local spath
    cmd='curl -fsSL'
    spath="{{- .chezmoi.homeDir -}}/.config/mpv/scripts/"
    mkdir -p "$spath"
    url="https://api.github.com/repos/christoph-heinrich/mpv-quality-menu/releases/latest"
    if [ -n "$GITHUB_TOKEN" ]; then
      cmd="$cmd --header 'Authorization: token $GITHUB_TOKEN'"
    fi
    eval "$cmd $url" | grep 'quality-menu.lua' | grep 'browser_' | cut -d\" -f4  | xargs curl -s -L --output "$spath/quality-menu.lua"
  {{ else }}
    true
  {{ end }}
}

function install_mpv_plugin_mpris() {
  {{ if .dependencies.newsboat }}
    local cmd
    local url
    local spath
    cmd='curl -fsSL'
    spath="{{- .chezmoi.homeDir -}}/.config/mpv/scripts/"
    mkdir -p "$spath"
    url="https://api.github.com/repos/hoyon/mpv-mpris/releases/latest"
    if [ -n "$GITHUB_TOKEN" ]; then
      cmd="$cmd --header 'Authorization: token $GITHUB_TOKEN'"
    fi
    eval "$cmd $url" | grep 'mpris.so' | grep 'browser_' | cut -d\" -f4  | xargs curl -s -L --output "$spath/mpris.so"
  {{ else }}
    true
  {{ end }}
}

function install_whispercpp() {
  {{ if lookPath "whispercpp" }}
    true
  {{ else }}
    {{ if .dependencies.whispercpp }}
      if grep -Eq '.*avx2.*f16c.*fma.*|.*avx2.*fma.*f16c.*|.*f16c.*avx2.*fma.*|.*f16c.*fma.*avx2.*|.*fma.*avx2.*f16c.*|.*fma.*f16c.*avx2.*' /proc/cpuinfo; then
          echo "Processor supports AVX2, FMA, and F16C. Proceeding with whispercpp installation..."
          local tempdir
          local modeldir
          local modelurl
          tempdir="$(mktemp -d)"
          modeldir="{{ .chezmoi.homeDir }}/.local/share/whisper-cpp/models"
          modelurl="https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin"
          git clone "https://github.com/ggerganov/whisper.cpp" "$tempdir"
          cd "$tempdir"
          make clean

          cuda_support=$(nvcc --version 2>&1)
          cuda_status=$?

          if [ $cuda_status -eq 0 ]; then
            GGML_CUDA=1 CUDA_DOCKER_ARCH=all make -j
          else
            make -j
          fi

          mv "$tempdir/main" "{{ .chezmoi.homeDir -}}/bin/whispercpp"
          cd -
          rm -rf "$tempdir"
          echo "whisper.cpp installed successfully"
          wget -P "$modeldir" -nv -nc --content-disposition "$modelurl"
          echo "tiny.en ggml model downloaded successfully"
      else
          echo "Processor does not support AVX2, FMA, and F16C. Skipping whispercpp installation..."
      fi
    {{ else }}
      true
    {{ end }}
  {{ end }}
}

# ****************************************************************************
# *                                   PPAs                                   *
# ****************************************************************************

function add_ppa_for_alacritty() {
  ! command -v alacritty &>/dev/null || return 0
  curl -fsSL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x52b24df7d43b5377' | sudo gpg --dearmor -o /usr/share/keyrings/alacritty-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/alacritty-keyring.gpg arch=amd64] https://ppa.launchpadcontent.net/aslatter/ppa/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/alacritty.list > /dev/null
}

function add_ppa_brave_browser() {
  {{ if .dependencies.brave }}
    ! command -v brave-browser &>/dev/null || return 0
    curl -fsSL 'https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg' | sudo gpg --dearmor -o /usr/share/keyrings/brave-browser-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list > /dev/null
  {{ else }}
    true
  {{ end }}
}


function add_ppa_brave_browser_beta() {
  {{ if .dependencies.brave_beta }}
    ! command -v brave-browser &>/dev/null || return 0
    curl -fsSL 'https://brave-browser-apt-beta.s3.brave.com/brave-browser-beta-archive-keyring.gpg' | sudo gpg --dearmor -o /usr/share/keyrings/brave-browser-beta-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/brave-browser-beta-archive-keyring.gpg arch=amd64] https://brave-browser-apt-beta.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-beta.list > /dev/null
  {{ else }}
    true
  {{ end }}
}

function add_ppa_sublime() {
  {{ if (or .dependencies.sublime_text .dependencies.sublime_merge) }}
    ! command -v subl &>/dev/null || return 0
    curl -fsSL 'https://download.sublimetext.com/sublimehq-pub.gpg' | sudo gpg --dearmor -o /usr/share/keyrings/sublimehq-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/sublimehq-archive-keyring.gpg] https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list > /dev/null
  {{ else }}
    true
  {{ end }}
}

function add_ppa_docker() {
  {{ if .dependencies.docker }}
    ! command -v docker &>/dev/null || return 0
    curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  {{ else }}
    true
  {{ end }}
}

function add_ppa_signal_messenger() {
  {{ if .dependencies.signal_messenger }}
    ! command -v signal-desktop &>/dev/null || return 0
    curl -fsSL 'https://updates.signal.org/desktop/apt/keys.asc' | sudo gpg --dearmor -o /usr/share/keyrings/signal-desktop-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main" | sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
  {{ else }}
    true
  {{ end }}
}

function add_ppa_libratbag() {
  {{ if .hardware.logitech.mx_anywhere_2s.enabled }}
    sudo add-apt-repository -y ppa:libratbag-piper/piper-libratbag-git
  {{ else }}
    true
  {{ end }}
}

function add_ppa_mpv_nightly() {
  {{ if .dependencies.newsboat }}
    ! command -v mpv &>/dev/null || return 0
    curl -fsSL 'https://non-gnu.uvt.nl/debian/uvt_key.gpg' | sudo gpg --dearmor -o /usr/share/keyrings/uvt-nl.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/uvt-nl.gpg] https://non-gnu.uvt.nl/debian $(lsb_release -sc) uvt" | sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
  {{ else }}
    true
  {{ end }}
}

# ****************************************************************************
# *                     APT Package Manager Installations                    *
# ****************************************************************************

function install_packages() {
  local packages=(

    alacritty
    at
    bfs
    cmake
    entr
    gnome-clocks
    gnome-screenshot
    gnome-sound-recorder
    gnupg
    libboost-dev
    libevdev-dev
    libnotify-bin
    libudev-dev
    libyaml-cpp-dev
    pcscd
    scdaemon
    tmux
    tree
    xclip

    {{ if .asdf.enabled }}

    {{ if .asdf.golang }}
    coreutils
    {{ end }}

    {{ if .asdf.python }}
    build-essential
    libbz2-dev
    libffi-dev
    liblzma-dev
    libncurses-dev
    libreadline-dev
    libsqlite3-dev
    libssl-dev
    libxml2-dev
    libxmlsec1-dev
    llvm
    make
    tk-dev
    xz-utils
    zlib1g-dev
    {{ end }}

    {{ if .asdf.ruby }}
    autoconf
    bison
    build-essential
    libdb-dev
    libffi-dev
    libgdbm-dev
    libgdbm6
    libncurses-dev
    libpq-dev
    libreadline-dev
    libssl-dev
    libyaml-dev
    rustc
    zlib1g-dev
    {{ end }}

    {{ if .asdf.postgres }}
    build-essential
    icu-devtools
    libcurl4-openssl-dev
    libreadline-dev
    libssl-dev
    linux-headers-$(uname -r)
    uuid-dev
    zlib1g-dev
    {{ end }}

    {{ end }}

    {{ if .hardware.logitech.mx_anywhere_2s.enabled }}
    ratbagd
    {{ end }}

    {{ if .hardware.ledger.nano_s.enabled }}
    libfuse2
    {{ end }}

    {{ if (or .dependencies.brave .dependencies.brave_beta) }}
    profile-sync-daemon
    {{ end }}

    {{ if .dependencies.brave }}
    brave-browser
    {{ end }}

    {{ if .dependencies.brave_beta }}
    brave-browser-beta
    {{ end }}

    {{ if .dependencies.zeal }}
    zeal
    {{ end }}

    {{ if .dependencies.meld }}
    meld
    {{ end }}

    {{ if .dependencies.sublime_merge }}
    sublime-merge
    {{ end }}

    {{ if .dependencies.sublime_text }}
    sublime-text
    {{ end }}

    {{ if .prefs.dracula_pro }}
    gnome-tweaks
    {{ end }}

    {{ if .dependencies.docker }}
    docker-ce
    docker-ce-cli
    containerd.io
    docker-compose
    {{ end }}

    {{ if .dependencies.newsboat }}
    newsboat
    playerctl
    task-spooler
    urlview
    {{ end }}

    {{ if .dependencies.pspg }}
    pspg
    {{ end }}

    {{ if .dependencies.libreoffice }}
    libreoffice-gtk3
    libreoffice-writer
    libreoffice-calc
    {{- end }}

    {{ if .dependencies.signal_messenger }}
    signal-desktop
    {{- end }}

    {{ if .dependencies.taskwarrior }}
    taskwarrior
    {{- end }}

    {{ if .dependencies.zathura }}
    zathura
    {{- end }}

    {{ if .fonts.font_croscore }}
    fonts-croscore
    {{- end }}

    {{ if .fonts.font_crosextra }}
    fonts-crosextra-carlito
    fonts-crosextra-caladea
    {{- end }}
  )

  add_ppa_for_alacritty
  add_ppa_brave_browser
  add_ppa_brave_browser_beta
  add_ppa_sublime
  add_ppa_docker
  add_ppa_signal_messenger
  add_ppa_libratbag
  add_ppa_mpv_nightly

  wait_for_apt && sudo apt -y update
  wait_for_apt && sudo apt -y upgrade
  wait_for_apt && sudo apt -y install "${packages[@]}"
  wait_for_apt && sudo apt -y autoremove
  wait_for_apt && sudo apt -y autoclean

  install_anki
  install_faas
  install_asdf
  install_keyd
  install_ledger_live
  install_taswarrior_tui
  install_mpv_nightly
  install_mpv_plugin_mpris
  install_mpv_plugin_quality_menu
  install_whispercpp
}

# ****************************************************************************
# *                                Main Script                               *
# ****************************************************************************

remove_packages
install_packages

{{ end }}
